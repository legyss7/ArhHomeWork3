package org.lesson3;

import java.awt.*;

public class Program {
    /**
     * ====================================================================
     * 1. Спроектировать абстрактный класс «Car» у которого должны быть
     * свойства: марка, модель, цвет, тип кузова, число колёс,
     * тип топлива, тип коробки передач, объём двигателя; методы:
     * движение, обслуживание, переключение передач, включение фар,
     * включение дворников.
     * ====================================================================
     * 2. Создать конкретный автомобиль путём наследования класса «Car».
     * ====================================================================
     * 3. Расширить абстрактный класс «Car», добавить метод: подметать
     * улицу. Создать конкретный автомобиль путём наследования класса «Car».
     * Провести проверку принципа SRP (принцып единственной ответственности).
     * ====================================================================
     * 4. Расширить абстрактный класс «Car», добавить метод: включение
     * противотуманных фар, перевозка груза. Провести проверку принципа OCP
     * (открыты для расширения закрыты для изменения).
     * ====================================================================
     * 5. Создать конкретный автомобиль путём наследования класса «Car»,
     * определить число колёс = 3. Провести проверку принципа LSP.
     * ====================================================================
     * 6. Создать конкретный автомобиль путём наследования класса «Car»,
     * определить метод «движение» - «полёт». Провести проверку принципа
     * LSP (принцип подстановки Барбары Лисков).
     * ====================================================================
     * 7. Создать интерфейс «Заправочная станция», создать метод:
     * заправка топливом.
     * ====================================================================
     * 8. Имплементировать метод интерфейса «Заправочная станция» в
     * конкретный класс «Car».
     * ====================================================================
     * 9. Добавить в интерфейс «Заправочная станция» методы: протирка
     * лобового стекла, протирка фар, протирка зеркал.
     * ====================================================================
     * 10. Имплементировать все методы интерфейса «Заправочная станция» в
     * конкретный класс «Car». Провести проверку принципа ISP (принцип
     * разделения интерфейсов). Создать дополнительный/е интерфейсы и
     * имплементировать их в конкретный класс «Car». Провести проверку
     * принципа ISP.
     * ====================================================================
     * 11. Создать путём наследования класса «Car» два автомобиля: с
     * бензиновым и дизельным двигателями, имплементировать метод
     * «Заправка топливом» интерфейса «Заправочная станция». Реализовать
     * заправку каждого автомобиля подходящим топливом. Провести
     * проверку принципа DIP (Инверсия зависимостей, модули верхних уровней
     * не должны зависть от модулей нихжних уровней. Детели должны зависеть
     * от абстракций).
     * ====================================================================
     */
    public static void main(String[] args) {
        Harvester harvester = new Harvester("A", "B", Color.BLACK);
        RefuelingStation refuelingStation = new RefuelingStation();
        harvester.setRefuelingStation(refuelingStation);
        harvester.fuel();
    }

    public static double calculateMaintenance(Car car) {
        if (car.getWheelsCount() == 6) {
            return 1500 * 6;
        } else {
            return 1000 * 4;
        }
    }
}
